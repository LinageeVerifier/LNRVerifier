{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { _generateLinkResponse, _request, _userResponse } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\n\nvar GoTrueAdminApi = /*#__PURE__*/function () {\n  function GoTrueAdminApi(_ref) {\n    var _ref$url = _ref.url,\n        url = _ref$url === void 0 ? '' : _ref$url,\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, GoTrueAdminApi);\n\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n\n\n  _createClass(GoTrueAdminApi, [{\n    key: \"signOut\",\n    value: function signOut(jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _request(this.fetch, 'POST', \"\".concat(this.url, \"/logout\"), {\n                  headers: this.headers,\n                  jwt: jwt,\n                  noResolveJson: true\n                });\n\n              case 3:\n                return _context.abrupt(\"return\", {\n                  error: null\n                });\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!isAuthError(_context.t0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  error: _context.t0\n                });\n\n              case 10:\n                throw _context.t0;\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n     * @param options.data Optional user metadata\n     */\n\n  }, {\n    key: \"inviteUserByEmail\",\n    value: function inviteUserByEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _request(this.fetch, 'POST', \"\".concat(this.url, \"/invite\"), {\n                  body: {\n                    email: email,\n                    data: options.data\n                  },\n                  headers: this.headers,\n                  redirectTo: options.redirectTo,\n                  xform: _userResponse\n                });\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                if (!isAuthError(_context2.t0)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  data: {\n                    user: null\n                  },\n                  error: _context2.t0\n                });\n\n              case 10:\n                throw _context2.t0;\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Generates email links and OTPs to be sent via a custom email provider.\n     * @param email The user's email.\n     * @param options.password User password. For signup only.\n     * @param options.data Optional user metadata. For signup only.\n     * @param options.redirectTo The redirect url which should be appended to the generated link\n     */\n\n  }, {\n    key: \"generateLink\",\n    value: function generateLink(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options, rest, body;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                options = params.options, rest = __rest(params, [\"options\"]);\n                body = Object.assign(Object.assign({}, rest), options);\n\n                if ('newEmail' in rest) {\n                  // replace newEmail with new_email in request body\n                  body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n                  delete body['newEmail'];\n                }\n\n                _context3.next = 6;\n                return _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/generate_link\"), {\n                  body: body,\n                  headers: this.headers,\n                  xform: _generateLinkResponse,\n                  redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo\n                });\n\n              case 6:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!isAuthError(_context3.t0)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    properties: null,\n                    user: null\n                  },\n                  error: _context3.t0\n                });\n\n              case 13:\n                throw _context3.t0;\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n    } // User Admin API\n\n    /**\n     * Creates a new user.\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n\n  }, {\n    key: \"createUser\",\n    value: function createUser(attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/users\"), {\n                  body: attributes,\n                  headers: this.headers,\n                  xform: _userResponse\n                });\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!isAuthError(_context4.t0)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  data: {\n                    user: null\n                  },\n                  error: _context4.t0\n                });\n\n              case 10:\n                throw _context4.t0;\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n\n  }, {\n    key: \"listUsers\",\n    value: function listUsers() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _yield$_request, data, error;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users\"), {\n                  headers: this.headers\n                });\n\n              case 3:\n                _yield$_request = _context5.sent;\n                data = _yield$_request.data;\n                error = _yield$_request.error;\n\n                if (!error) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw error;\n\n              case 8:\n                return _context5.abrupt(\"return\", {\n                  data: Object.assign({}, data),\n                  error: null\n                });\n\n              case 11:\n                _context5.prev = 11;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!isAuthError(_context5.t0)) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  data: {\n                    users: []\n                  },\n                  error: _context5.t0\n                });\n\n              case 15:\n                throw _context5.t0;\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n\n  }, {\n    key: \"getUserById\",\n    value: function getUserById(uid) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n                  headers: this.headers,\n                  xform: _userResponse\n                });\n\n              case 3:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n                _context6.prev = 6;\n                _context6.t0 = _context6[\"catch\"](0);\n\n                if (!isAuthError(_context6.t0)) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  data: {\n                    user: null\n                  },\n                  error: _context6.t0\n                });\n\n              case 10:\n                throw _context6.t0;\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n\n  }, {\n    key: \"updateUserById\",\n    value: function updateUserById(uid, attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return _request(this.fetch, 'PUT', \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n                  body: attributes,\n                  headers: this.headers,\n                  xform: _userResponse\n                });\n\n              case 3:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 6:\n                _context7.prev = 6;\n                _context7.t0 = _context7[\"catch\"](0);\n\n                if (!isAuthError(_context7.t0)) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  data: {\n                    user: null\n                  },\n                  error: _context7.t0\n                });\n\n              case 10:\n                throw _context7.t0;\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * @param id The user id you want to remove.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/admin/users/\").concat(id), {\n                  headers: this.headers,\n                  xform: _userResponse\n                });\n\n              case 3:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 6:\n                _context8.prev = 6;\n                _context8.t0 = _context8[\"catch\"](0);\n\n                if (!isAuthError(_context8.t0)) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  data: {\n                    user: null\n                  },\n                  error: _context8.t0\n                });\n\n              case 10:\n                throw _context8.t0;\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 6]]);\n      }));\n    }\n  }]);\n\n  return GoTrueAdminApi;\n}(); //# sourceMappingURL=GoTrueAdminApi.js.map\n\n\nexport { GoTrueAdminApi as default };","map":null,"metadata":{},"sourceType":"module"}