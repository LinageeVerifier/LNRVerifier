{"ast":null,"code":"import _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nvar OnlineManager = /*#__PURE__*/function (_Subscribable) {\n  _inherits(OnlineManager, _Subscribable);\n\n  var _super = _createSuper(OnlineManager);\n\n  function OnlineManager() {\n    var _this;\n\n    _classCallCheck(this, OnlineManager);\n\n    _this = _super.call(this);\n\n    _this.setup = function (onOnline) {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onOnline();\n        }; // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(OnlineManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!this.cleanup) {\n        this.setEventListener(this.setup);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _this$cleanup;\n\n        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n        this.cleanup = undefined;\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _this2 = this;\n\n      var _this$cleanup2;\n\n      this.setup = setup;\n      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n      this.cleanup = setup(function (online) {\n        if (typeof online === 'boolean') {\n          _this2.setOnline(online);\n        } else {\n          _this2.onOnline();\n        }\n      });\n    }\n  }, {\n    key: \"setOnline\",\n    value: function setOnline(online) {\n      this.online = online;\n\n      if (online) {\n        this.onOnline();\n      }\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      this.listeners.forEach(function (listener) {\n        listener();\n      });\n    }\n  }, {\n    key: \"isOnline\",\n    value: function isOnline() {\n      if (typeof this.online === 'boolean') {\n        return this.online;\n      }\n\n      if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n        return true;\n      }\n\n      return navigator.onLine;\n    }\n  }]);\n\n  return OnlineManager;\n}(Subscribable);\n\nvar onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager }; //# sourceMappingURL=onlineManager.mjs.map","map":null,"metadata":{},"sourceType":"module"}