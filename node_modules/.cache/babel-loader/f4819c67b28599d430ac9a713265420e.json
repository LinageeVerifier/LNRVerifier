{"ast":null,"code":"import _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nvar FocusManager = /*#__PURE__*/function (_Subscribable) {\n  _inherits(FocusManager, _Subscribable);\n\n  var _super = _createSuper(FocusManager);\n\n  function FocusManager() {\n    var _this;\n\n    _classCallCheck(this, FocusManager);\n\n    _this = _super.call(this);\n\n    _this.setup = function (onFocus) {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onFocus();\n        }; // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(FocusManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!this.cleanup) {\n        this.setEventListener(this.setup);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _this$cleanup;\n\n        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n        this.cleanup = undefined;\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _this2 = this;\n\n      var _this$cleanup2;\n\n      this.setup = setup;\n      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n      this.cleanup = setup(function (focused) {\n        if (typeof focused === 'boolean') {\n          _this2.setFocused(focused);\n        } else {\n          _this2.onFocus();\n        }\n      });\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(focused) {\n      this.focused = focused;\n\n      if (focused) {\n        this.onFocus();\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.listeners.forEach(function (listener) {\n        listener();\n      });\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      if (typeof this.focused === 'boolean') {\n        return this.focused;\n      } // document global can be unavailable in react native\n\n\n      if (typeof document === 'undefined') {\n        return true;\n      }\n\n      return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n    }\n  }]);\n\n  return FocusManager;\n}(Subscribable);\n\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager }; //# sourceMappingURL=focusManager.mjs.map","map":null,"metadata":{},"sourceType":"module"}