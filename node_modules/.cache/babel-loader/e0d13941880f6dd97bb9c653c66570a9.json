{"ast":null,"code":"import _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _createForOfIteratorHelper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar createSprinkles = function createSprinkles(composeStyles) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var sprinklesStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(args.map(function (a) {\n      return a.styles;\n    }))));\n    var sprinklesKeys = Object.keys(sprinklesStyles);\n    var shorthandNames = sprinklesKeys.filter(function (property) {\n      return 'mappings' in sprinklesStyles[property];\n    });\n\n    var sprinklesFn = function sprinklesFn(props) {\n      var classNames = [];\n      var shorthands = {};\n\n      var nonShorthands = _objectSpread2({}, props);\n\n      var hasShorthands = false;\n\n      var _iterator = _createForOfIteratorHelper(shorthandNames),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var shorthand = _step.value;\n          var value = props[shorthand];\n\n          if (value != null) {\n            var sprinkle = sprinklesStyles[shorthand];\n            hasShorthands = true;\n\n            var _iterator3 = _createForOfIteratorHelper(sprinkle.mappings),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var propMapping = _step3.value;\n                shorthands[propMapping] = value;\n\n                if (nonShorthands[propMapping] == null) {\n                  delete nonShorthands[propMapping];\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var finalProps = hasShorthands ? _objectSpread2(_objectSpread2({}, shorthands), nonShorthands) : props;\n\n      for (var prop in finalProps) {\n        var propValue = finalProps[prop];\n        var _sprinkle = sprinklesStyles[prop];\n\n        try {\n          if (_sprinkle.mappings) {\n            // Skip shorthands\n            continue;\n          }\n\n          if (typeof propValue === 'string' || typeof propValue === 'number') {\n            if (process.env.NODE_ENV !== 'production') {\n              if (!_sprinkle.values[propValue].defaultClass) {\n                throw new Error();\n              }\n            }\n\n            classNames.push(_sprinkle.values[propValue].defaultClass);\n          } else if (Array.isArray(propValue)) {\n            for (var responsiveIndex = 0; responsiveIndex < propValue.length; responsiveIndex++) {\n              var responsiveValue = propValue[responsiveIndex];\n\n              if (responsiveValue != null) {\n                var conditionName = _sprinkle.responsiveArray[responsiveIndex];\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (!_sprinkle.values[responsiveValue].conditions[conditionName]) {\n                    throw new Error();\n                  }\n                }\n\n                classNames.push(_sprinkle.values[responsiveValue].conditions[conditionName]);\n              }\n            }\n          } else {\n            for (var _conditionName in propValue) {\n              // Conditional style\n              var _value = propValue[_conditionName];\n\n              if (_value != null) {\n                if (process.env.NODE_ENV !== 'production') {\n                  if (!_sprinkle.values[_value].conditions[_conditionName]) {\n                    throw new Error();\n                  }\n                }\n\n                classNames.push(_sprinkle.values[_value].conditions[_conditionName]);\n              }\n            }\n          }\n        } catch (e) {\n          if (process.env.NODE_ENV !== 'production') {\n            (function () {\n              var SprinklesError = /*#__PURE__*/function (_Error) {\n                _inherits(SprinklesError, _Error);\n\n                var _super = _createSuper(SprinklesError);\n\n                function SprinklesError(message) {\n                  var _this;\n\n                  _classCallCheck(this, SprinklesError);\n\n                  _this = _super.call(this, message);\n                  _this.name = 'SprinklesError';\n                  return _this;\n                }\n\n                return _createClass(SprinklesError);\n              }( /*#__PURE__*/_wrapNativeSuper(Error));\n\n              var format = function format(v) {\n                return typeof v === 'string' ? \"\\\"\".concat(v, \"\\\"\") : v;\n              };\n\n              var invalidPropValue = function invalidPropValue(prop, value, possibleValues) {\n                throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" has no value \").concat(format(value), \". Possible values are \").concat(Object.keys(possibleValues).map(format).join(', ')));\n              };\n\n              if (!_sprinkle) {\n                throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" is not a valid sprinkle\"));\n              }\n\n              if (typeof propValue === 'string' || typeof propValue === 'number') {\n                if (!(propValue in _sprinkle.values)) {\n                  invalidPropValue(prop, propValue, _sprinkle.values);\n                }\n\n                if (!_sprinkle.values[propValue].defaultClass) {\n                  throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" has no default condition. You must specify which conditions to target explicitly. Possible options are \").concat(Object.keys(_sprinkle.values[propValue].conditions).map(format).join(', ')));\n                }\n              }\n\n              if (typeof propValue === 'object') {\n                if (!('conditions' in _sprinkle.values[Object.keys(_sprinkle.values)[0]])) {\n                  throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" is not a conditional property\"));\n                }\n\n                if (Array.isArray(propValue)) {\n                  if (!('responsiveArray' in _sprinkle)) {\n                    throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" does not support responsive arrays\"));\n                  }\n\n                  var breakpointCount = _sprinkle.responsiveArray.length;\n\n                  if (breakpointCount < propValue.length) {\n                    throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" only supports up to \").concat(breakpointCount, \" breakpoints. You passed \").concat(propValue.length));\n                  }\n\n                  var _iterator2 = _createForOfIteratorHelper(propValue),\n                      _step2;\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var _responsiveValue = _step2.value;\n\n                      if (!_sprinkle.values[_responsiveValue]) {\n                        invalidPropValue(prop, _responsiveValue, _sprinkle.values);\n                      }\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                } else {\n                  for (var _conditionName2 in propValue) {\n                    var _value2 = propValue[_conditionName2];\n\n                    if (_value2 != null) {\n                      if (!_sprinkle.values[_value2]) {\n                        invalidPropValue(prop, _value2, _sprinkle.values);\n                      }\n\n                      if (!_sprinkle.values[_value2].conditions[_conditionName2]) {\n                        throw new SprinklesError(\"\\\"\".concat(prop, \"\\\" has no condition named \").concat(format(_conditionName2), \". Possible values are \").concat(Object.keys(_sprinkle.values[_value2].conditions).map(format).join(', ')));\n                      }\n                    }\n                  }\n                }\n              }\n            })();\n          }\n\n          throw e;\n        }\n      }\n\n      return composeStyles(classNames.join(' '));\n    };\n\n    return Object.assign(sprinklesFn, {\n      properties: new Set(sprinklesKeys)\n    });\n  };\n};\n\nexport { createSprinkles as c };","map":null,"metadata":{},"sourceType":"module"}