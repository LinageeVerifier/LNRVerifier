{"ast":null,"code":"import _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nvar QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n\n  var _super = _createSuper(QueriesObserver);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _classCallCheck(this, QueriesObserver);\n\n    _this = _super.call(this);\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n\n      if (this.listeners.length === 1) {\n        this.observers.forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this2.onUpdate(observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.observers.forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, notifyOptions) {\n      var _this3 = this;\n\n      this.queries = queries;\n      notifyManager.batch(function () {\n        var prevObservers = _this3.observers;\n\n        var newObserverMatches = _this3.findMatchingObservers(_this3.queries); // set options for the new observers to notify of changes\n\n\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n          return [observer.options.queryHash, observer];\n        }));\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n\n        _this3.observers = newObservers;\n        _this3.observersMap = newObserversMap;\n        _this3.result = newResult;\n\n        if (!_this3.hasListeners()) {\n          return;\n        }\n\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this3.onUpdate(observer, result);\n          });\n        });\n\n        _this3.notify();\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.result;\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return this.observers.map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries) {\n      return this.findMatchingObservers(queries).map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n    }\n  }, {\n    key: \"findMatchingObservers\",\n    value: function findMatchingObservers(queries) {\n      var _this4 = this;\n\n      var prevObservers = this.observers;\n      var defaultedQueryOptions = queries.map(function (options) {\n        return _this4.client.defaultQueryOptions(options);\n      });\n      var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n        var match = prevObservers.find(function (observer) {\n          return observer.options.queryHash === defaultedOptions.queryHash;\n        });\n\n        if (match != null) {\n          return [{\n            defaultedQueryOptions: defaultedOptions,\n            observer: match\n          }];\n        }\n\n        return [];\n      });\n      var matchedQueryHashes = matchingObservers.map(function (match) {\n        return match.defaultedQueryOptions.queryHash;\n      });\n      var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n        return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n      });\n      var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n        return !matchingObservers.some(function (match) {\n          return match.observer === prevObserver;\n        });\n      });\n\n      var getObserver = function getObserver(options) {\n        var defaultedOptions = _this4.client.defaultQueryOptions(options);\n\n        var currentObserver = _this4.observersMap[defaultedOptions.queryHash];\n        return currentObserver != null ? currentObserver : new QueryObserver(_this4.client, defaultedOptions);\n      };\n\n      var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          var previouslyUsedObserver = unmatchedObservers[index];\n\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver\n            };\n          }\n        }\n\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options)\n        };\n      });\n\n      var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n        return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n      };\n\n      return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(observer, result) {\n      var index = this.observers.indexOf(observer);\n\n      if (index !== -1) {\n        this.result = replaceAt(this.result, index, result);\n        this.notify();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this5 = this;\n\n      notifyManager.batch(function () {\n        _this5.listeners.forEach(function (listener) {\n          listener(_this5.result);\n        });\n      });\n    }\n  }]);\n\n  return QueriesObserver;\n}(Subscribable);\n\nexport { QueriesObserver }; //# sourceMappingURL=queriesObserver.mjs.map","map":null,"metadata":{},"sourceType":"module"}