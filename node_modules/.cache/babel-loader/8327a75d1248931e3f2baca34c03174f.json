{"ast":null,"code":"import _slicedToArray from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs'; // CLASS\n\nvar QueryCache = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryCache, _Subscribable);\n\n  var _super = _createSuper(QueryCache);\n\n  function QueryCache(config) {\n    var _this;\n\n    _classCallCheck(this, QueryCache);\n\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.queries = [];\n    _this.queriesMap = {};\n    return _this;\n  }\n\n  _createClass(QueryCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var _options$queryHash;\n\n      var queryKey = options.queryKey;\n      var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n      var query = this.get(queryHash);\n\n      if (!query) {\n        query = new Query({\n          cache: this,\n          logger: client.getLogger(),\n          queryKey: queryKey,\n          queryHash: queryHash,\n          options: client.defaultQueryOptions(options),\n          state: state,\n          defaultOptions: client.getQueryDefaults(queryKey),\n          meta: options.meta\n        });\n        this.add(query);\n      }\n\n      return query;\n    }\n  }, {\n    key: \"add\",\n    value: function add(query) {\n      if (!this.queriesMap[query.queryHash]) {\n        this.queriesMap[query.queryHash] = query;\n        this.queries.push(query);\n        this.notify({\n          type: 'added',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(query) {\n      var queryInMap = this.queriesMap[query.queryHash];\n\n      if (queryInMap) {\n        query.destroy();\n        this.queries = this.queries.filter(function (x) {\n          return x !== query;\n        });\n\n        if (queryInMap === query) {\n          delete this.queriesMap[query.queryHash];\n        }\n\n        this.notify({\n          type: 'removed',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n\n      notifyManager.batch(function () {\n        _this2.queries.forEach(function (query) {\n          _this2.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(queryHash) {\n      return this.queriesMap[queryHash];\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.queries;\n    }\n  }, {\n    key: \"find\",\n    value: function find(arg1, arg2) {\n      var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n          _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 1),\n          filters = _parseFilterArgs2[0];\n\n      if (typeof filters.exact === 'undefined') {\n        filters.exact = true;\n      }\n\n      return this.queries.find(function (query) {\n        return matchQuery(filters, query);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(arg1, arg2) {\n      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2),\n          _parseFilterArgs4 = _slicedToArray(_parseFilterArgs3, 1),\n          filters = _parseFilterArgs4[0];\n\n      return Object.keys(filters).length > 0 ? this.queries.filter(function (query) {\n        return matchQuery(filters, query);\n      }) : this.queries;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (listener) {\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this4 = this;\n\n      notifyManager.batch(function () {\n        _this4.queries.forEach(function (query) {\n          query.onFocus();\n        });\n      });\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this5 = this;\n\n      notifyManager.batch(function () {\n        _this5.queries.forEach(function (query) {\n          query.onOnline();\n        });\n      });\n    }\n  }]);\n\n  return QueryCache;\n}(Subscribable);\n\nexport { QueryCache }; //# sourceMappingURL=queryCache.mjs.map","map":null,"metadata":{},"sourceType":"module"}