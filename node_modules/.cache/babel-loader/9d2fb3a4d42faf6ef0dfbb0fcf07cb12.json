{"ast":null,"code":"import * as React from 'react';\nimport { shouldThrowError } from './utils.mjs';\n\nvar ensurePreventErrorBoundaryRetry = function ensurePreventErrorBoundaryRetry(options, errorResetBoundary) {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\n\nvar useClearResetErrorBoundary = function useClearResetErrorBoundary(errorResetBoundary) {\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\n\nvar getHasError = function getHasError(_ref) {\n  var result = _ref.result,\n      errorResetBoundary = _ref.errorResetBoundary,\n      useErrorBoundary = _ref.useErrorBoundary,\n      query = _ref.query;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);\n};\n\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary }; //# sourceMappingURL=errorBoundaryUtils.mjs.map","map":null,"metadata":{},"sourceType":"module"}