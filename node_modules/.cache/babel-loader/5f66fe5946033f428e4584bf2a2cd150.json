{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\n\nvar StorageBucketApi = /*#__PURE__*/function () {\n  function StorageBucketApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fetch = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, StorageBucketApi);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n\n\n  _createClass(StorageBucketApi, [{\n    key: \"listBuckets\",\n    value: function listBuckets() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!isStorageError(_context.t0)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 11:\n                throw _context.t0;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n\n  }, {\n    key: \"getBucket\",\n    value: function getBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                if (!isStorageError(_context2.t0)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n\n              case 11:\n                throw _context2.t0;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @returns newly created bucket id\n     */\n\n  }, {\n    key: \"createBucket\",\n    value: function createBucket(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        public: false\n      };\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!isStorageError(_context3.t0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n\n              case 11:\n                throw _context3.t0;\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     */\n\n  }, {\n    key: \"updateBucket\",\n    value: function updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!isStorageError(_context4.t0)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 11:\n                throw _context4.t0;\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n\n  }, {\n    key: \"emptyBucket\",\n    value: function emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id, \"/empty\"), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!isStorageError(_context5.t0)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n\n              case 11:\n                throw _context5.t0;\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n\n  }, {\n    key: \"deleteBucket\",\n    value: function deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n\n                if (!isStorageError(_context6.t0)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 11:\n                throw _context6.t0;\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n  }]);\n\n  return StorageBucketApi;\n}(); //# sourceMappingURL=StorageBucketApi.js.map\n\n\nexport { StorageBucketApi as default };","map":null,"metadata":{},"sourceType":"module"}