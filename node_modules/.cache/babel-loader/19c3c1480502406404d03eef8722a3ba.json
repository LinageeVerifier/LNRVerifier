{"ast":null,"code":"import _slicedToArray from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\n\nfunction useIsFetching(arg1, arg2, arg3) {\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2, arg3),\n      _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 2),\n      filters = _parseFilterArgs2[0],\n      _parseFilterArgs2$ = _parseFilterArgs2[1],\n      options = _parseFilterArgs2$ === void 0 ? {} : _parseFilterArgs2$;\n\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return queryClient.isFetching(filters);\n  }, function () {\n    return queryClient.isFetching(filters);\n  });\n}\n\nexport { useIsFetching }; //# sourceMappingURL=useIsFetching.mjs.map","map":null,"metadata":{},"sourceType":"module"}