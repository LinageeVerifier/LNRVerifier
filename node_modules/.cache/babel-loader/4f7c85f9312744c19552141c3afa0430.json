{"ast":null,"code":"import _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { notifyManager } from './notifyManager.mjs';\nimport { Mutation } from './mutation.mjs';\nimport { matchMutation, noop } from './utils.mjs';\nimport { Subscribable } from './subscribable.mjs'; // CLASS\n\nvar MutationCache = /*#__PURE__*/function (_Subscribable) {\n  _inherits(MutationCache, _Subscribable);\n\n  var _super = _createSuper(MutationCache);\n\n  function MutationCache(config) {\n    var _this;\n\n    _classCallCheck(this, MutationCache);\n\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.mutations = [];\n    _this.mutationId = 0;\n    return _this;\n  }\n\n  _createClass(MutationCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var mutation = new Mutation({\n        mutationCache: this,\n        logger: client.getLogger(),\n        mutationId: ++this.mutationId,\n        options: client.defaultMutationOptions(options),\n        state: state,\n        defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined,\n        meta: options.meta\n      });\n      this.add(mutation);\n      return mutation;\n    }\n  }, {\n    key: \"add\",\n    value: function add(mutation) {\n      this.mutations.push(mutation);\n      this.notify({\n        type: 'added',\n        mutation: mutation\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(mutation) {\n      this.mutations = this.mutations.filter(function (x) {\n        return x !== mutation;\n      });\n      this.notify({\n        type: 'removed',\n        mutation: mutation\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n\n      notifyManager.batch(function () {\n        _this2.mutations.forEach(function (mutation) {\n          _this2.remove(mutation);\n        });\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.mutations;\n    }\n  }, {\n    key: \"find\",\n    value: function find(filters) {\n      if (typeof filters.exact === 'undefined') {\n        filters.exact = true;\n      }\n\n      return this.mutations.find(function (mutation) {\n        return matchMutation(filters, mutation);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(filters) {\n      return this.mutations.filter(function (mutation) {\n        return matchMutation(filters, mutation);\n      });\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (listener) {\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      var pausedMutations = this.mutations.filter(function (x) {\n        return x.state.isPaused;\n      });\n      return notifyManager.batch(function () {\n        return pausedMutations.reduce(function (promise, mutation) {\n          return promise.then(function () {\n            return mutation.continue().catch(noop);\n          });\n        }, Promise.resolve());\n      });\n    }\n  }]);\n\n  return MutationCache;\n}(Subscribable);\n\nexport { MutationCache }; //# sourceMappingURL=mutationCache.mjs.map","map":null,"metadata":{},"sourceType":"module"}