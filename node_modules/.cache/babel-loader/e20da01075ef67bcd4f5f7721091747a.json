{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/danie/OneDrive/Desktop/work on this/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport crossFetch from 'cross-fetch';\n\nvar PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    _classCallCheck(this, PostgrestBuilder);\n\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.allowEmpty = builder.allowEmpty;\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (this.schema === undefined) {// skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      } // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n      // https://github.com/supabase/postgrest-js/pull/247\n\n\n      var _fetch = this.fetch;\n\n      var res = _fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(function (res) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a, _b, _c, error, data, count, status, statusText, body, countHeader, contentRange, _body, postgrestResponse;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  error = null;\n                  data = null;\n                  count = null;\n                  status = res.status;\n                  statusText = res.statusText;\n\n                  if (!res.ok) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  if (!(this.method !== 'HEAD')) {\n                    _context.next = 11;\n                    break;\n                  }\n\n                  _context.next = 9;\n                  return res.text();\n\n                case 9:\n                  body = _context.sent;\n\n                  if (body === '') {// Prefer: return=minimal\n                  } else if (this.headers['Accept'] === 'text/csv') {\n                    data = body;\n                  } else if (this.headers['Accept'] && this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                    data = body;\n                  } else {\n                    data = JSON.parse(body);\n                  }\n\n                case 11:\n                  countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                  contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n\n                  if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                  }\n\n                  _context.next = 23;\n                  break;\n\n                case 16:\n                  _context.next = 18;\n                  return res.text();\n\n                case 18:\n                  _body = _context.sent;\n\n                  try {\n                    error = JSON.parse(_body);\n                  } catch (_d) {\n                    error = {\n                      message: _body\n                    };\n                  }\n\n                  if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                  }\n\n                  if (!(error && this.shouldThrowOnError)) {\n                    _context.next = 23;\n                    break;\n                  }\n\n                  throw error;\n\n                case 23:\n                  postgrestResponse = {\n                    error: error,\n                    data: data,\n                    count: count,\n                    status: status,\n                    statusText: statusText\n                  };\n                  return _context.abrupt(\"return\", postgrestResponse);\n\n                case 25:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      });\n\n      if (!this.shouldThrowOnError) {\n        res = res.catch(function (fetchError) {\n          return {\n            error: {\n              message: \"FetchError: \".concat(fetchError.message),\n              details: '',\n              hint: '',\n              code: fetchError.code || ''\n            },\n            data: null,\n            count: null,\n            status: 0,\n            statusText: ''\n          };\n        });\n      }\n\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n\n  return PostgrestBuilder;\n}(); //# sourceMappingURL=PostgrestBuilder.js.map\n\n\nexport { PostgrestBuilder as default };","map":null,"metadata":{},"sourceType":"module"}