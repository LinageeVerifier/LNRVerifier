{"ast":null,"code":"import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  var queue = [];\n  var transactions = 0;\n\n  var notifyFn = function notifyFn(callback) {\n    callback();\n  };\n\n  var batchNotifyFn = function batchNotifyFn(callback) {\n    callback();\n  };\n\n  var batch = function batch(callback) {\n    var result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  var schedule = function schedule(callback) {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  var batchCalls = function batchCalls(callback) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n\n  var flush = function flush() {\n    var originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(function () {\n        batchNotifyFn(function () {\n          originalQueue.forEach(function (callback) {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  var setNotifyFunction = function setNotifyFunction(fn) {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  var setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch: batch,\n    batchCalls: batchCalls,\n    schedule: schedule,\n    setNotifyFunction: setNotifyFunction,\n    setBatchNotifyFunction: setBatchNotifyFunction\n  };\n} // SINGLETON\n\n\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager }; //# sourceMappingURL=notifyManager.mjs.map","map":null,"metadata":{},"sourceType":"module"}